# bar plot (with error bars)
ggplot(df, aes(x = Condition, y = ReactionTime, fill = Condition)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +
geom_jitter(color = "black", size = 1, alpha = 0.5, width = 0.2) +  #individual data points
scale_fill_viridis(discrete = TRUE, alpha = 0.6 ) +
theme_minimal() +
labs(title = "Reaction Time Distribution by Condition",
x = "Condition",
y = "Reaction Time (ms)") +
theme(legend.position = "none")
# error = sem
# point estimates
# linear regressions
# bar plot (with error bars)
ggplot(df, aes(x = Condition, y = ReactionTime, fill = Condition)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +
geom_jitter(color = "black", size = 1, alpha = 0.5, width = 0.2) +  #individual data points
scale_fill_viridis(discrete = TRUE, alpha = 0.18 ) +
theme_minimal() +
labs(title = "Reaction Time Distribution by Condition",
x = "Condition",
y = "Reaction Time (ms)") +
theme(legend.position = "none")
# error = sem
# point estimates
# linear regressions
# bar plot (with error bars)
ggplot(df, aes(x = Condition, y = ReactionTime, fill = Condition)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +
geom_jitter(color = "black", size = 1, alpha = 0.5, width = 0.2) +  #individual data points
scale_fill_viridis(discrete = TRUE, alpha = 0.6 ) +
theme_minimal() +
labs(title = "Reaction Time Distribution by Condition",
x = "Condition",
y = "Reaction Time (ms)") +
theme(legend.position = "none")
# error = sem
# point estimates
# linear regressions
# bar plot (with error bars)
ggplot(df, aes(x = Condition, y = ReactionTime, fill = Condition)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +
geom_jitter(color = "black", size = 1, alpha = 0.5, width = 0.2) +  #individual data points
scale_fill_viridis(discrete = TRUE, alpha = 0.6 ) +
theme_minimal() +
labs(title = "Reaction Time Distribution by Condition",
x = "Types of Background Music",
y = "Reaction Time (ms)") +
theme(legend.position = "none")
# error = sem
# point estimates
# linear regressions
# print head
Head(df)
# conversion of data types if necessary
summary(df)
# remove data according to exclusion criteria
# conversion of data types if necessary
summary(df)
df_rt_summary_by_background_cond <- df %>%
group_by(Condition, BetrayalChoices) %>% #what vars you want to group by
summarise(
mean_RT = mean(ReactionTime),
median_RT = median(ReactionTime),
sd_RT = sd(ReactionTime),
min_RT = min(ReactionTime),
max_RT = max(ReactionTime),
n = n()
)
View(df)
# remove data according to exclusion criteria
# conversion of data types if necessary
summary(df)
df_rt_summary_by_betrayalchoices_cond <- df %>%
group_by(Condition, BetrayalChoices) %>% #what vars you want to group by
summarise(
mean_RT = mean(ReactionTime),
median_RT = median(ReactionTime),
sd_RT = sd(ReactionTime),
min_RT = min(ReactionTime),
max_RT = max(ReactionTime),
n = n()
)
View(df_rt_summary_by_betrayalchoices_cond)
# remove data according to exclusion criteria
# conversion of data types if necessary
summary(df)
df_rt_summary_by_betrayalchoices_cond <- df %>%
group_by(Condition, BetrayalChoices) %>% #what vars you want to group by
summarise(
mean_RT = mean(ReactionTime),
median_RT = median(ReactionTime),
sd_RT = sd(ReactionTime),
min_RT = min(ReactionTime),
max_RT = max(ReactionTime),
n = n()
)
print(df_rt_summary_by_background_cond)
# remove data according to exclusion criteria
# conversion of data types if necessary
summary(df)
df_rt_summary_by_betrayalchoices_cond <- df %>%
group_by(Condition, BetrayalChoices) %>% #what vars you want to group by
summarise(
mean_RT = mean(ReactionTime),
median_RT = median(ReactionTime),
sd_RT = sd(ReactionTime),
min_RT = min(ReactionTime),
max_RT = max(ReactionTime),
n = n()
)
print(df_rt_summary_by_betrayalchoices_cond)
# remove data according to exclusion criteria
print(df_rt_summary_by_betrayalchoices_cond)
print(df_rt_summary_by_betrayalchoices_cond)
print(df_rt_summary_by_betrayalchoices_cond)
print(df)
print(df_rt_summary_by_betrayalchoices_cond)
# conversion of data types if necessary
summary(df)
df_rt_summary_by_betrayalchoices_cond <- df %>%
group_by(Condition, BetrayalChoices) %>% #what vars you want to group by
summarise(
mean_RT = mean(ReactionTime, na.rm = TRUE),
median_RT = median(ReactionTime, na.rm = TRUE),
sd_RT = sd(ReactionTime, na.rm = TRUE),
min_RT = min(ReactionTime, na.rm = TRUE),
max_RT = max(ReactionTime, na.rm = TRUE),
n = n()
)
print(df_rt_summary_by_betrayalchoices_cond)
# conversion of data types if necessary
summary(df)
df_rt_summary_by_betrayalchoices_cond <- df %>%
group_by(Condition, BetrayalChoices) %>% #what vars you want to group by
summarise(
mean_RT = mean(ReactionTime, na.rm = TRUE),
median_RT = median(ReactionTime, na.rm = TRUE),
sd_RT = sd(ReactionTime, na.rm = TRUE),
min_RT = min(ReactionTime, na.rm = TRUE),
max_RT = max(ReactionTime, na.rm = TRUE),
n = n()
)
sum(is.na(df$ReactionTime))  # This will show how many NAs are in the ReactionTime column
print(df_rt_summary_by_betrayalchoices_cond)
# conversion of data types if necessary
summary(df)
df_rt_summary_by_betrayalchoices_cond <- df %>%
group_by(Condition, BetrayalChoices) %>% #what vars you want to group by
summarise(
mean_RT = mean(ReactionTime, na.rm = TRUE),
median_RT = median(ReactionTime, na.rm = TRUE),
sd_RT = sd(ReactionTime, na.rm = TRUE),
min_RT = min(ReactionTime, na.rm = TRUE),
max_RT = max(ReactionTime, na.rm = TRUE),
n = n()
)
sum(is.na(df$ReactionTime))  # This will show how many NAs are in the ReactionTime column
print(df_rt_summary_by_betrayalchoices_cond)
sum(is.na(df_rt_summary_by_betrayalchoices_cond))  # This will show how many NAs are in the ReactionTime column
# conversion of data types if necessary
summary(df)
df_rt_summary_by_betrayalchoices_cond <- df %>%
group_by(Condition, BetrayalChoices) %>% #what vars you want to group by
summarise(
mean_RT = mean(ReactionTime, na.rm = TRUE),
median_RT = median(ReactionTime, na.rm = TRUE),
sd_RT = ifelse(n_distinct(ReactionTime) > 1, sd(ReactionTime, na.rm = TRUE), NA),  # Check if there are enough distinct values
min_RT = min(ReactionTime, na.rm = TRUE),
max_RT = max(ReactionTime, na.rm = TRUE),
n = n(),
.groups = 'drop'
)
print(df_rt_summary_by_betrayalchoices_cond)
sum(is.na(df_rt_summary_by_betrayalchoices_cond))  # This will show how many NAs are in the ReactionTime column
sum(is.na(df_rt_summary_by_betrayalchoices_cond$sd_RT))  # This will show how many NAs are in the ReactionTime column
# conversion of data types if necessary
summary(df)
df_rt_summary_by_betrayalchoices_cond <- df %>%
group_by(Condition, BetrayalChoices) %>% #what vars you want to group by
summarise(
mean_RT = mean(ReactionTime, na.rm = TRUE),
median_RT = median(ReactionTime, na.rm = TRUE),
sd_RT = ifelse(n() > 1 & n_distinct(ReactionTime) > 1, sd(ReactionTime, na.rm = TRUE), NA),
min_RT = min(ReactionTime, na.rm = TRUE),
max_RT = max(ReactionTime, na.rm = TRUE),
n = n()
)
sum(is.na(df_rt_summary_by_betrayalchoices_cond$sd_RT))  # This will show how many NAs are in the ReactionTime column
print(df_rt_summary_by_betrayalchoices_cond)
filter(is.na(sd_RT))
filter(is.na(df_rt_summary_by_betrayalchoices_cond$sd_RT))
anova(df, variable)
anova_result <- aov(ReactionTime ~ Condition * Background +
Error(Participant/Condition), data = df)
anova_result <- aov(ReactionTime ~ Condition * BetrayalChoices +
Error(Participant/Condition), data = df)
summary(anova_result)
# DV ~ IV + IV = ???
t.test(df$ReactionTime[df$Condition == "Angry"], df$ReactionTime[df$Condition ==
"Excited"])
anova_result <- aov(ReactionTime ~ Condition * BetrayalChoices +
Error(Participant/Condition), data = df)
summary(anova_result)
# Conditions are significant different to eachother = yes main effect
# BetrayalChoices does not have a main effect
anova_result <- aov(ReactionTime ~ Condition * BetrayalChoices +
Error(Participant/Condition), data = df)
summary(anova_result)
# Conditions are significant different to eachother = yes main effect
# BetrayalChoices does not have a main effect
# No interaction effect between Conditions and BetrayalChoices
# Load required packages
install.packages("ggplot2", "stats", "tidyverse", "viridis", "emmeans")
library(ggplot2)
library(stats)
library(tidyverse)
library(viridis)
library(emmeans)
# Simulating data
# Example of one population
# Simulating data
# Example of one population
sampleSizeRequired = 200 # participants
# Conditions
condLabels = c("Excited", "Angry", "Calm", "Sad")
condPerParticipant = 1
# The pre-registeration said it is a within-subject design, but it has changed into between-subjects design.
# Outcome measures
# reactions time, likert responses
# Think through df
# rows = participants
# columns = condition(s), DVs, demographics
# rep = repetition
df <- data.frame(Participant=rep(0, sampleSizeRequired * condPerParticipant),
Condition=rep("NA", sampleSizeRequired, condPerParticipant),
ReactionTime=rep(0, sampleSizeRequired, condPerParticipant),
BetrayalChoices=rep(0, sampleSizeRequired, condPerParticipant),
Excited = rep(0, sampleSizeRequired, condPerParticipant),
Determined = rep(0, sampleSizeRequired, condPerParticipant),
Strong = rep(0, sampleSizeRequired, condPerParticipant),
Alert = rep(0, sampleSizeRequired, condPerParticipant),
Hostile = rep(0, sampleSizeRequired, condPerParticipant),
Distressed = rep(0, sampleSizeRequired, condPerParticipant),
Nervous = rep(0, sampleSizeRequired, condPerParticipant),
Guilty = rep(0, sampleSizeRequired, condPerParticipant),
PositiveEmotion = rep(0, sampleSizeRequired, condPerParticipant),
NegativeEmotion = rep(0, sampleSizeRequired, condPerParticipant),
stringsAsFactors=TRUE)
df$Participant <- rep(1:sampleSizeRequired, each = condPerParticipant)
# assign participants to a condition
df$Condition <- (rep(condLabels, size = sampleSizeRequired, replace = TRUE))
# create random RT in 4 conditions, this is seemed as the mean RT for all trials.
df$ReactionTime[df$Condition == "Excited"] = pmax(rnorm(sampleSizeRequired/condPerParticipant,
mean = 1500, sd = 500), 300)
df$ReactionTime[df$Condition == "Angry"] =
pmax(rnorm(sampleSizeRequired/condPerParticipant,
mean = 1500, sd = 500), 300)
df$ReactionTime[df$Condition == "Calm"] = pmax(rnorm(sampleSizeRequired/condPerParticipant,
mean = 3000, sd = 500), 300)
df$ReactionTime[df$Condition == "Sad"] = pmax(rnorm(sampleSizeRequired/condPerParticipant,
mean = 3000, sd = 500), 300)
# Assign BetrayalChoices around 0 - 15 with higher number in Angry and Sad conditions, lower number in Excited and calm conditions
df$BetrayalChoices[df$Condition == "Excited"] <- round(rnorm(sum(df$Condition == "Excited"), mean = 4, sd = 3))
df$BetrayalChoices[df$Condition == "Angry"] <- round(rnorm(sum(df$Condition == "Angry"), mean = 12, sd = 3))
df$BetrayalChoices[df$Condition == "Calm"] <- round(rnorm(sum(df$Condition == "Calm"), mean = 4, sd = 3))
df$BetrayalChoices[df$Condition == "Sad"] <- round(rnorm(sum(df$Condition == "Sad"), mean = 12, sd = 3))
df$BetrayalChoices <- pmin(pmax(df$BetrayalChoices, 0), 15)
# create random responses on likert scale
df$Excited <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Determined <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Strong <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Alert <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Hostile <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Distressed <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Nervous <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Guilty <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
# Calculate summed average for positive emotions (0 is lowest, 5 is highest)
df$PositiveEmotion <- rowSums(df[, c("Excited", "Determined", "Strong", "Alert")])/4
# Calculate summed average for negative emotions (0 is lowest, 5 is highest)
df$NegativeEmotion <- rowSums(df[, c("Hostile", "Distressed", "Nervous", "Guilty")])/ 4
View(df)
mean(df_rt_summary_by_betrayalchoices_cond$sd_RT)
mean(df_rt_summary_by_betrayalchoices_cond$sd_RT, na.rm = TRUE)
sum(is.na(df_rt_summary_by_betrayalchoices_cond$sd_RT))  # This will show how many NAs are in the ReactionTime column
(df_rt_summary_by_betrayalchoices_cond$sd_RT, na.rm = TRUE)
print(df_rt_summary_by_betrayalchoices_cond$sd_RT, na.rm = TRUE)
print(df_rt_summary_by_betrayalchoices_cond$sd_RT, na.rm = TRUE)
mean(df_rt_summary_by_betrayalchoices_cond$sd_RT, na.rm = TRUE)
sum(is.na(df_rt_summary_by_betrayalchoices_cond$sd_RT))  # This will show how many NAs are in the ReactionTime column
mean(df_rt_summary_by_betrayalchoices_cond$sd_RT, na.rm = TRUE)
sum(is.na(df_rt_summary_by_betrayalchoices_cond$sd_RT))  # This will show how many NAs are in the ReactionTime column
is.na(df_rt_summary_by_betrayalchoices_cond$sd_RT, na.rm = TRUE)
sum(is.na(df_rt_summary_by_betrayalchoices_cond$sd_RT, na.rm = TRUE))  # This will show how many NAs are in the ReactionTime column
df_rt_summary_by_betrayalchoices_cond<- na.omit(df_rt_summary_by_betrayalchoices_cond)
sum(is.na(df_rt_summary_by_betrayalchoices_cond$sd_RT))  # This will show how many NAs are in the ReactionTime column
print(df_rt_summary_by_betrayalchoices_cond)
summary(anova_result)
# box plot for reaction time matching each conditions
ggplot(df, aes(x = Condition, y = ReactionTime, fill = Condition)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +
geom_jitter(color = "black", size = 1, alpha = 0.5, width = 0.2) +
scale_color_manual(values = Preset) +
theme_minimal() +
labs(title = "Reaction Time Distributed by Condition",
x = "Types of Background Music",
y = "Reaction Time (ms)") +
theme(legend.position = "none")
# Load required packages
if (!require(ggplot2, stats, tidyverse, viridis, emmeans))
install.packages("ggplot2", "stats", "tidyverse", "viridis", "emmeans")
# Load required packages
library(ggplot2)
library(stats)
library(tidyverse)
library(viridis)
library(emmeans)
if (!require(ggsignif))
install.packages("ggsignif")
library(ggsignif)
# Simulating data
# Example of one population
sampleSizeRequired = 200 # participants
# Conditions
condLabels = c("Excited", "Angry", "Calm", "Sad")
condPerParticipant = 1
# The pre-registeration said it is a within-subject design, but it has changed into between-subjects design.
# Outcome measures
# reactions time, likert responses
# Think through df
# rows = participants
# columns = condition(s), DVs, demographics
# rep = repetition
df <- data.frame(Participant=rep(0, sampleSizeRequired * condPerParticipant),
Condition=rep("NA", sampleSizeRequired, condPerParticipant),
ReactionTime=rep(0, sampleSizeRequired, condPerParticipant),
BetrayalChoices=rep(0, sampleSizeRequired, condPerParticipant),
Excited = rep(0, sampleSizeRequired, condPerParticipant),
Determined = rep(0, sampleSizeRequired, condPerParticipant),
Strong = rep(0, sampleSizeRequired, condPerParticipant),
Alert = rep(0, sampleSizeRequired, condPerParticipant),
Hostile = rep(0, sampleSizeRequired, condPerParticipant),
Distressed = rep(0, sampleSizeRequired, condPerParticipant),
Nervous = rep(0, sampleSizeRequired, condPerParticipant),
Guilty = rep(0, sampleSizeRequired, condPerParticipant),
PositiveEmotion = rep(0, sampleSizeRequired, condPerParticipant),
NegativeEmotion = rep(0, sampleSizeRequired, condPerParticipant),
stringsAsFactors=TRUE)
df$Participant <- rep(1:sampleSizeRequired, each = condPerParticipant)
# assign participants to a condition
df$Condition <- (rep(condLabels, size = sampleSizeRequired, replace = TRUE))
# create random RT in 4 conditions, this is seemed as the mean RT for all trials.
df$ReactionTime[df$Condition == "Excited"] = pmax(rnorm(sampleSizeRequired/condPerParticipant,
mean = 1500, sd = 500), 300)
df$ReactionTime[df$Condition == "Angry"] =
pmax(rnorm(sampleSizeRequired/condPerParticipant,
mean = 1500, sd = 500), 300)
df$ReactionTime[df$Condition == "Calm"] = pmax(rnorm(sampleSizeRequired/condPerParticipant,
mean = 3000, sd = 500), 300)
df$ReactionTime[df$Condition == "Sad"] = pmax(rnorm(sampleSizeRequired/condPerParticipant,
mean = 3000, sd = 500), 300)
# Assign BetrayalChoices around 0 - 15 with higher number in Angry and Sad conditions, lower number in Excited and calm conditions
df$BetrayalChoices[df$Condition == "Excited"] <- round(rnorm(sum(df$Condition == "Excited"), mean = 4, sd = 3))
df$BetrayalChoices[df$Condition == "Angry"] <- round(rnorm(sum(df$Condition == "Angry"), mean = 12, sd = 3))
df$BetrayalChoices[df$Condition == "Calm"] <- round(rnorm(sum(df$Condition == "Calm"), mean = 4, sd = 3))
df$BetrayalChoices[df$Condition == "Sad"] <- round(rnorm(sum(df$Condition == "Sad"), mean = 12, sd = 3))
df$BetrayalChoices <- pmin(pmax(df$BetrayalChoices, 0), 15)
# create random responses on likert scale
df$Excited <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Determined <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Strong <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Alert <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Hostile <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Distressed <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Nervous <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
df$Guilty <- sample(c(1:5), sampleSizeRequired, replace = TRUE)
# Calculate summed average for positive emotions (0 is lowest, 5 is highest)
df$PositiveEmotion <- rowSums(df[, c("Excited", "Determined", "Strong", "Alert")])/4
# Calculate summed average for negative emotions (0 is lowest, 5 is highest)
df$NegativeEmotion <- rowSums(df[, c("Hostile", "Distressed", "Nervous", "Guilty")])/ 4
View(df)
# conversion of data types if necessary
summary(df)
df_rt_summary_by_betrayalchoices_cond <- df %>%
group_by(Condition, BetrayalChoices) %>% #what vars you want to group by
summarise(
mean_RT = mean(ReactionTime),
median_RT = median(ReactionTime),
sd_RT = sd(ReactionTime),
min_RT = min(ReactionTime),
max_RT = max(ReactionTime),
n = n()
)
# removed any data that has NA in sd_RT
df_rt_summary_by_betrayalchoices_cond<- na.omit(df_rt_summary_by_betrayalchoices_cond)
sum(is.na(df_rt_summary_by_betrayalchoices_cond$sd_RT))  # This will show how many NAs are in the ReactionTime column
print(df_rt_summary_by_betrayalchoices_cond)
anova_result <- aov(ReactionTime ~ Condition * BetrayalChoices +
Error(Participant/Condition), data = df)
summary(anova_result)
# Conditions are significantly different to each other = yes main effect, hypothesis proved
# BetrayalChoices does not have a main effect on reaction time, no hypothesis is done on this, as it shouldn't have a main effect.
# No interaction effect between Conditions and BetrayalChoices, hypothesis failed
# The type of music does not affect people's choices, but do affect people's reaction (thinking time).
# box plot for reaction time matching each conditions
ggplot(df, aes(x = Condition, y = ReactionTime, fill = Condition)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +
geom_jitter(color = "black", size = 1, alpha = 0.5, width = 0.2) +
scale_color_manual(values = Preset) +
theme_minimal() +
labs(title = "Reaction Time Distributed by Condition",
x = "Types of Background Music",
y = "Reaction Time (ms)") +
theme(legend.position = "none")
# box plot for reaction time matching each conditions
ggplot(df, aes(x = Condition, y = ReactionTime, fill = Condition)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +
geom_jitter(color = "black", size = 1, alpha = 0.5, width = 0.2) +
scale_color_manual(values = c(
"Excited" = rgb(248/255, 118/255, 109/255, alpha = 0.7),  # Adjust alpha here
"Angry" = rgb(0/255, 191/255, 196/255, alpha = 0.7),
"Calm" = rgb(122/255, 174/255, 0/255, alpha = 0.7),
"Sad" = rgb(255/255, 97/255, 204/255, alpha = 0.7)  # Corrected color for Sad
)) +
theme_minimal() +
labs(title = "Reaction Time Distributed by Condition",
x = "Types of Background Music",
y = "Reaction Time (ms)") +
theme(legend.position = "none")
# condition matching betrayal counts
# Scatter plot with conditions, betrayal choices and reaction time
# Scatter plot with conditions, betrayal choices and reaction time
ggplot(df, aes(x = BetrayalChoices, y = ReactionTime, color = Condition)) +
geom_point(alpha = 0.7, size = 3) +  # Plot points
geom_smooth(method = "lm", se = TRUE, aes(color = Condition), linetype = "dashed") +  # Add regression lines
labs(
title = "Scatter Plot of Reaction Time vs Betrayal Choices",
x = "Betrayal Choices",
y = "Reaction Time",
color = "Condition"
) +
scale_color_manual(values = Preset) +
theme_minimal()
# box plot for reaction time matching each conditions
ggplot(df, aes(x = Condition, y = ReactionTime, fill = Condition)) +
geom_boxplot(alpha = 0.6, outlier.shape = NA) +
geom_jitter(color = "black", size = 1, alpha = 0.5, width = 0.2) +
scale_color_manual(values = c(
"Excited" = rgb(248/255, 118/255, 109/255, alpha = 0.7),  # Adjust alpha here
"Angry" = rgb(0/255, 191/255, 196/255, alpha = 0.7),
"Calm" = rgb(122/255, 174/255, 0/255, alpha = 0.7),
"Sad" = rgb(255/255, 97/255, 204/255, alpha = 0.7)  # Corrected color for Sad
)) +
theme_minimal() +
labs(title = "Reaction Time Distributed by Condition",
x = "Types of Background Music",
y = "Reaction Time (ms)") +
theme(legend.position = "none")
# condition matching betrayal counts
# Scatter plot with conditions, betrayal choices and reaction time
# Scatter plot with conditions, betrayal choices and reaction time
ggplot(df, aes(x = BetrayalChoices, y = ReactionTime, color = Condition)) +
geom_point(alpha = 0.7, size = 3) +  # Plot points
geom_smooth(method = "lm", se = TRUE, aes(color = Condition), linetype = "dashed") +  # Add regression lines
labs(
title = "Scatter Plot of Reaction Time vs Betrayal Choices",
x = "Betrayal Choices",
y = "Reaction Time",
color = "Condition"
) +
scale_color_manual(values = c(
"Excited" = rgb(248/255, 118/255, 109/255, alpha = 0.7),  # Adjust alpha here
"Angry" = rgb(0/255, 191/255, 196/255, alpha = 0.7),
"Calm" = rgb(122/255, 174/255, 0/255, alpha = 0.7),
"Sad" = rgb(255/255, 97/255, 204/255, alpha = 0.7)  # Corrected color for Sad
)) +
theme_minimal()
# Check
summary(df)
print(df_rt_summary_by_betrayalchoices_cond)
# get summary / descriptive stats
# check variable distributions (plot histograms)
ggplot(df, aes(x = ReactionTime, fill = Condition)) +
geom_histogram(binwidth = 200, color = "black", alpha = 0.6) +
labs(
title = "Distribution of Reaction Times by Condition",
x = "Reaction Time (ms)",
y = "Count"
) +
scale_fill_manual(values = c("Excited" = "#F8766D",
"Angry" = "#00BFC4",
"Calm" = "#7CAE00",
"Sad" = "#FF61CC")) +
theme_minimal()
# check correlations between variables
# scatterplots between 2 variables
# get summary / descriptive stats
# check variable distributions (plot histograms)
ggplot(df, aes(x = ReactionTime, fill = Condition)) +
geom_histogram(binwidth = 200, color = "black", alpha = 0.6) +
labs(
title = "Distribution of Reaction Times by Condition",
x = "Reaction Time (ms)",
y = "Count"
) +
scale_fill_manual(values = c("Excited" = "#F8766D",
"Angry" = "#00BFC4",
"Calm" = "#7CAE00",
"Sad" = "#FF61CC")) +
theme_minimal()
# check correlations between variables
# scatterplots between 2 variables
